plugins {
    `java-library`
    id("net.neoforged.moddev")
    idea
}

val mod_id: String by rootProject
val mod_version: String by rootProject
val maven_group: String by rootProject

val neoforgeVersion = project.extensions.create<NeoForgeVersionExtension>("neoforgeVersion")

group = maven_group
version = mod_version

repositories {
    maven("https://maven.parchmentmc.org/")
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = neoforgeVersion.javaVersion.map { JavaLanguageVersion.of(it) }

neoForge {
    parchment {
        minecraftVersion = neoforgeVersion.parchmentMinecraftVersion
        mappingsVersion = neoforgeVersion.parchmentMappingsVersion
    }

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        create("client") {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty("neoforge.enabledGameTestNamespaces", mod_id)
        }

        create("server") {
            server()
            programArgument("--nogui")
            systemProperty("neoforge.enabledGameTestNamespaces", mod_id)
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        create("gameTestServer") {
            type = "gameTestServer"
            systemProperty("neoforge.enabledGameTestNamespaces", mod_id)
        }

        create("data") {
            clientData()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll(
                "--mod", mod_id,
                "--all",
                "--output", file("src/generated/resources/").getAbsolutePath(),
                "--existing", file("src/main/resources/").getAbsolutePath()
            )
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty("forge.logging.markers", "REGISTRIES")

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // multi mod projects should define one per mod
        create(mod_id) {
            sourceSet(sourceSets.main.get())
        }
    }
}

afterEvaluate {
    neoForge {
        // Specify the version of NeoForge to use.
        version = neoforgeVersion.neoVersion.get()
    }
}

// Include resources generated by data generators.
sourceSets.main.get().resources { srcDir("src/generated/resources") }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    val localRuntime by creating
    runtimeClasspath.get().extendsFrom(localRuntime)
}

dependencies {
    implementation(project(":common"))
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        isDownloadSources = true
        isDownloadJavadoc = true
    }
}

val copyCommonCode = tasks.register<Copy>("copyCommonCode") {
    dependsOn(project(":common").tasks["classes"])

    from(project(":common").layout.buildDirectory.file("classes/java/main"))
    into(layout.buildDirectory.file("classes/java/main"))
}

val copyCommonRes = tasks.register<Copy>("copyCommonRes") {
    dependsOn(project(":common").tasks["classes"])

    from(project(":common").layout.buildDirectory.file("resources/main"))
    into(layout.buildDirectory.file("resources/main"))
}

tasks.named("compileJava") {
    dependsOn(copyCommonCode)
}

tasks.named<ProcessResources>("processResources") {
    dependsOn(copyCommonRes)
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
val generateModMetadata = tasks.register<ProcessResources>("generateModMetadata") {
    inputs.properties(
        "mod_version" to project.version,
        "neo_version" to neoforgeVersion.neoVersion,
        "minecraft_version_range" to neoforgeVersion.minecraftVersionRange
    )
    expand(
        "mod_version" to inputs.properties["mod_version"]!!,
        "neo_version" to inputs.properties["neo_version"]!!,
        "minecraft_version_range" to inputs.properties["minecraft_version_range"]!!
    )

    from("src/main/templates")
    into("build/generated/sources/modMetadata")
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.get().resources.srcDir(generateModMetadata)
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask(generateModMetadata)

tasks.withType<Jar> {
    archiveVersion = neoforgeVersion.minecraftVersion.map { "$version-$it-neoforge" }
}
